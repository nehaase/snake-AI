// snake v4.3_N Monte Carlo Simulation
// STABLE RELEASE

#include <iostream>
#include <random>
#include <thread> // for time
#include <tuple> // for multiple return values
#include <ctime> // for time out
#define SECOND 1
#define HALF_SECOND 0,5
#define RUNOUT_TIME 0,1
using namespace std;

const int boardsize = 11;

int score;
int highscore = 47;
int current_highscore = 0;
int food_map[boardsize][boardsize];
int player_map[boardsize][boardsize];
int deadend_map[boardsize+2][boardsize+2];

int above_avg_amount;
int below_avg_amount;
int above_avg_percent;
int below_avg_percent;
int at_avg_percent;

int output_interval;
int output_counter;
int delay;
int progress_interval;


vector<int> score_list;
float avg_score;
int outputmode;
const int scores_expected_end = 63;
const int scores_expected_start = 0;
int scores[scores_expected_end];

//starting position
int i_player;
int j_player;
//now defined in game loop!

int i_player_sug;
int j_player_sug;

//food position
int i_food;
int j_food;

bool alive;
bool scored;
bool won;
bool move_ok;
bool move_ideal;
bool consider_deadend;
bool run_games = true;
bool show_restarts;



void sleep2() {
    this_thread::sleep_for(std::chrono::milliseconds(delay));
}

void sleep3() {
    this_thread::sleep_for(std::chrono::milliseconds(1000));
}

void create_board() {
    for (int i = 0; i < boardsize; i++) {
        for (int j = 0; j < boardsize; j++) {
            food_map[i][j] = 0;
        }
    }
}

void create_player() {
    for (int i = 0; i < boardsize; i++) {
        for (int j = 0; j < boardsize; j++) {
            player_map[i][j] = 0;
        }
    }
}

void update_player() {
    for (int i = 0; i < boardsize; i++) {
        for (int j = 0; j < boardsize; j++) {
            if (player_map[i][j] != 0)
                player_map[i][j] --;
        }
    }
}

void spawn_new_food() {
    bool free_space = false;
    int random_number_1 = 0;
    int random_number_2 = 0;
    while (!free_space) {
        random_device rd;
        mt19937 gen(rd());
        uniform_int_distribution<> distribution(0, boardsize-1);
        random_number_1 = distribution(gen);
        random_number_2 = distribution(gen);
        
        //check if free space
        if (food_map[random_number_1][random_number_2] == 0 && player_map[random_number_1][random_number_2] == 0) {
            free_space = true;
            food_map[random_number_1][random_number_2] = -1;
        }
    }
    i_food = random_number_1;
    j_food = random_number_2;
}

void create_deadend_map() {
    // enter all player positions
    for (int i = 0; i < boardsize+2; i++) {
        for (int j = 0; j < boardsize+2; j++) {
            if (i != 0 && j != 0) {
                if (player_map[i-1][j-1] != 0) {
                    deadend_map[i][j] = 1;
                } else {
                    deadend_map[i][j] = 0;
                }
            }
            // draw border
            if (i == 0 || i == boardsize+1) {
                deadend_map[i][j] = 3;
            }
            if (j == 0 || j == boardsize+1) {
                deadend_map[i][j] = 3;
            }
        }
    }
    
    // iteratively mark fields that border 3 other marked fiels
    bool new_spot_found = true;
    int counter = 0;
    while (new_spot_found) {
        new_spot_found = false;
        for (int i = 1; i < boardsize+1; i++) {
            for (int j = 1; j < boardsize+1; j++) {
                counter = 0;
                if (deadend_map[i][j] == 0) {
                    if (deadend_map[i+1][j] != 0) {
                        if (!(i+1 == i_player+1 && j == j_player+1))
                            counter ++;
                    }
                    if (deadend_map[i-1][j] != 0) {
                        if (!(i-1 == i_player+1 && j == j_player+1))
                            counter ++;
                    }
                    if (deadend_map[i][j+1] != 0) {
                        if (!(i == i_player+1 && j+1 == j_player+1))
                            counter ++;
                    }
                    if (deadend_map[i][j-1] != 0) {
                        if (!(i == i_player+1 && j-1 == j_player+1))
                            counter ++;
                    }
                }
                // if three surrounding:
                if (counter >= 3) {
                    deadend_map[i][j] = 2;
                    new_spot_found = true;
                }
            }
        }
    }
}

void check_scored() {
    if (i_player == i_food && j_player == j_food) {
        scored = true;
        score ++;
    }
}

void check_alive_boundaries() {
    if (i_player > boardsize-1 || j_player > boardsize-1 || i_player < 0 || j_player < 0)
        alive = false;
}

void check_alive_snake() {
    if (player_map[i_player][j_player] != 0)
        alive = false;
}

void check_won() {
    if (score == (boardsize*boardsize)) {
        won = true;
        alive = false;
    }
}

void checks() {
    check_alive_boundaries();
    check_alive_snake();
    check_scored();
    check_won();
}

// DEAD END EXPERIMENTAL
bool check_deadend() {
    // check if dead end expected
    if (deadend_map[i_player_sug+1][j_player_sug+1] != 0) {
        return false;
    } else {
        return true;
    }
}

bool check_move_ok() {
    // check if crash with player
    if (player_map[i_player_sug][j_player_sug] != 0) {
        return false;
    // check if crash with walls
    } else if (i_player_sug < 0) {
        return false;
    } else if (j_player_sug < 0) {
        return false;
    } else if (i_player_sug > boardsize-1) {
        return false;
    } else if (j_player_sug > boardsize-1) {
        return false;
    } else {
        return true;
    }
}

bool check_move() {
    if (check_move_ok()) {
        if (consider_deadend) {
            if (check_deadend()) {
                return true;
            } else {
                return false;
            }
        } else {
            return true;
        }
    } else {
        return false;
    }
}

void getmove6() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    j_player_sug --;
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        if (consider_deadend) {
            consider_deadend = false;
            i_player_sug = i_player;
            j_player_sug = j_player;
        } else {
            alive = false;
        }
    }
}

void getmove5() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    i_player_sug --;
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove6();
    }
}

void getmove4() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    j_player_sug ++;
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove5();
    }
}

void getmove3() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    i_player_sug ++;
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove4();
    }
}

void getmove2() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    if (j_player < j_food) {
        j_player_sug ++;
    } else if (j_player > j_food) {
        j_player_sug --;
    } else if (i_player < i_food) {
        i_player_sug ++;
    } else if (i_player > i_food) {
        i_player_sug --;
    }
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove3();
    }
}

void getmove1() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    if (i_player < i_food) {
        i_player_sug ++;
    } else if (i_player > i_food) {
        i_player_sug --;
    } else if (j_player < j_food) {
        j_player_sug ++;
    } else if (j_player > j_food) {
        j_player_sug --;
    }
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove2();
    }
}

void getmove() {
    consider_deadend = true;
    getmove1();
    if (i_player == i_player_sug && j_player == j_player_sug) {
        consider_deadend = false;
        getmove1();
    }
}

void output() {
    switch (outputmode) {
        case 1:
            cout << "\n\n\n\n\n";
            cout << score_list.size() << ": " << score << endl;
            cout << "-------" << endl;
            
            cout << "avg: " << avg_score << endl;
            cout << "max: " << current_highscore << endl;
            break;
            
        case 2:
            cout << score_list.size() << ": (" << avg_score << "|" << current_highscore << ") (" << below_avg_percent << "|" << at_avg_percent << "|" << above_avg_percent << "): ";
            for (int i = 1; i <= score; i++) {
                cout << "#";
            }
            cout << " " << score << endl;
            break;
            
        case 3:
            cout << score << endl;
            break;
            
        case 4:
            if (output_counter == 1) {
                cout << "[SYS:] calculating probabilities..." << endl;
                cout << "[SYS:] this can take a few moments." << endl;
                output_counter ++;
            } else if (output_counter == output_interval) {
                cout << "\n[SYS:] CALCULATIONS COMPLETE" << endl;
                sleep3();
                cout << "--------------" << endl;
                cout << "games: " << output_interval << endl;
                cout << "avg: " << avg_score << endl;
                cout << "max: " << current_highscore << endl;
                cout << "--------------" << endl;
                cout << "above avg: " << above_avg_percent << "%" << endl;
                cout << "below avg: " << below_avg_percent << "%" << endl;
                cout << "--------------" << endl;
                for (int i = scores_expected_start; i < scores_expected_end; i++) {
                    if (i < 10) {
                        cout << i << " : " << scores[i] << " ";
                    } else {
                        cout << i << ": " << scores[i] << " ";
                    }
                    for (int j = 0; j < (scores[i]/(output_interval/4000)); j++) {
                        if (i == avg_score) {
                            cout << "E";
                        } else {
                            cout << "#";
                        }
                    }
                    cout << "\n";
                }
                cout << "-------------" << endl;
                run_games = false;
            } else if (output_counter % progress_interval == 0) {
                cout << output_counter << endl;
                output_counter ++;
            } else {
                output_counter ++;
            }
            break;
        case 5:
            if (output_counter == 1) {
                cout << "[MCS] calculating probabilities..." << endl;
                cout << "[MCS] this can take a few moments." << endl;
                output_counter ++;
                sleep2();
            } else if (output_counter == output_interval) {
                cout << "\n[MCS] CALCULATIONS COMPLETE" << endl;
                sleep3();
                cout << "--------------" << endl;
                cout << "games: " << output_interval << endl;
                cout << "avg: " << avg_score << endl;
                cout << "max: " << current_highscore << endl;
                cout << "--------------" << endl;
                cout << "above avg: " << above_avg_percent << "%" << endl;
                cout << "below avg: " << below_avg_percent << "%" << endl;
                cout << "--------------" << endl;
                for (int i = scores_expected_start; i < scores_expected_end; i++) {
                    if (i < 10) {
                        cout << i << " : " << scores[i] << " ";
                    } else {
                        cout << i << ": " << scores[i] << " ";
                    }
                    for (int j = 0; j < (scores[i]/(output_interval/4000)); j++) {
                        if (i == avg_score) {
                            cout << "E";
                        } else {
                            cout << "#";
                        }
                    }
                    cout << "\n";
                }
                cout << "-------------" << endl;
                run_games = false;
            } else if (output_counter % progress_interval == 0) {
                cout << output_counter << endl;
                output_counter ++;
            } else {
                cout << score_list.size() << ": (" << avg_score << "|" << current_highscore << ") (" << below_avg_percent << "|" << at_avg_percent << "|" << above_avg_percent << "): ";
                for (int i = 1; i <= score; i++) {
                    cout << "#";
                }
                cout << " " << score << endl;
                output_counter ++;
            }
            break;
            
    }
}

void game() {
    while (run_games) {
        alive = true;
        create_player();
        create_board();
        scored = true;
        score = 1;
        i_player = (boardsize-1)/2;
        j_player = (boardsize-1)/2;
        avg_score = 0;
        
        // restart clock!
        clock_t start = clock();
        clock_t now;

        while (alive) {
            checks();
            if (scored) {
                spawn_new_food(); //spawn new food
                scored = false;
            } else {
                update_player();
            }
            player_map[i_player][j_player] = score; //draw new
            if (!alive) {
                break;
            }
            create_deadend_map();
            getmove();
            
            // check for runtime
            now = clock();
            if (((now-start)/CLOCKS_PER_SEC) >= SECOND) {
                alive = false;
                if (show_restarts)
                    cout << "[MCS] system timed out - restarting..." << endl;
                sleep3();
                break;
            }
        }
        score_list.push_back(score);
        int tot_score = 0;
        int tot_score_new = 0;
        for (int i = 0; i < score_list.size(); i++) {
            tot_score_new = tot_score + score_list[i];
            tot_score = tot_score_new;
            avg_score = static_cast<float>(tot_score/(i+1));
        }
        if (score > current_highscore)
            current_highscore = score;
        
        if (score > (avg_score)) {
            above_avg_amount ++;
        } else if (score < (avg_score)) {
            below_avg_amount ++;
        }
        below_avg_percent = (100*below_avg_amount/score_list.size());
        above_avg_percent = (100*above_avg_amount/score_list.size());
        at_avg_percent = ((100-below_avg_percent)-above_avg_percent);
        
        scores[score] ++;
        
        output();
        
        sleep2();
    }
}


int main() {
    cout << "WELCOME TO SNAKE MONTE CARLO SIMULATION BY NELSON" << endl;
    cout << "=================================================" << endl;
    cout << "mode 1: nr: score\n        avg: avg\n        max: max" << endl;
    cout << "mode 2: nr: (avg|max): 000000000 score" << endl;
    cout << "mode 3: score" << endl;
    cout << "mode 4: monte carlo simulation" << endl;
    cout << "mode 5: mode 2 & mode 4" << endl;
    cout << "--------------------------------" << endl;
    cout << "[MCQ] choose output mode: ";
    cin >> outputmode;
    if (outputmode >= 1 && outputmode <= 5) {
        switch (outputmode) {
            case 1:
                show_restarts = false;
                break;
            case 2:
                show_restarts = true;
                break;
            case 3:
                show_restarts = false;
                break;
            case 4: {
                cout << "[MCQ] nr. of games (>4000): ";
                cin >> output_interval;
                cout << "[MCQ] progress update interval: ";
                cin >> progress_interval;
                cout << "[MCQ] show timeout restart sequence (y/n): ";
                string input;
                cin >> input;
                if (input == "y")
                    show_restarts = true;
                else
                    show_restarts = false;
            } // brackets are to seperate output_interval inputs
            case 5:
                show_restarts = true;
                cout << "[MCQ] nr. of games (>4000): ";
                cin >> output_interval;
                break;
            default:
                cout << "[MCS] ERROR: UNABLE TO IDENTIFIE OUTPUTMODE" << endl;
        }
        cout << "[MCQ] enter time delay (milliseconds): ";
        cin >> delay;
        game();
    }
    return 0;
}
