// v3.4 experimental
// merging of v3.3 and v4.2.1
// BUGGY; NOT WORKING
// (remove global variables and use return functions where possible)

#include <iostream>
#include <random>
#include <thread> // for time
using namespace std;

const int boardsize = 11;

int score;
int highscore = 120;
int food_map[boardsize][boardsize];
int player_map[boardsize][boardsize];
int direction_map_1[boardsize][boardsize];
int direction_map_2[boardsize][boardsize];
int direction_map_3[boardsize][boardsize];
int deadend_map[boardsize+2][boardsize+2];
int gamestate;

int moves_done;
int nextmove;
long long recalculations;
long long moves_considered;
int current_moves_considered;
int moves_since_food;
int max_moves_since_food;

int deadend_iterations;

//starting position
int i_player;
int j_player;
//now defined in game loop!

int i_player_sug;
int j_player_sug;

//food position
int i_food;
int j_food;

bool alive;
bool scored;
bool won;
bool move_ok;
bool move_ideal;
bool forever = true;
bool consider_deadend;

void sleep() {
    this_thread::sleep_for(std::chrono::milliseconds(150));
}

void sleep2() {
    this_thread::sleep_for(std::chrono::milliseconds(5000));
}

void create_board() {
    for (int i = 0; i < boardsize; i++) {
        for (int j = 0; j < boardsize; j++) {
            food_map[i][j] = 0;
        }
    }
}

void create_player() {
    for (int i = 0; i < boardsize; i++) {
        for (int j = 0; j < boardsize; j++) {
            player_map[i][j] = 0;
        }
    }
}

//reduce snake values by 1
void update_player() {
    for (int i = 0; i < boardsize; i++) {
        for (int j = 0; j < boardsize; j++) {
            if (player_map[i][j] != 0)
                player_map[i][j] --;
        }
    }
}

void spawn_new_food() {
    bool free_space = false;
    int random_number_1 = 0;
    int random_number_2 = 0;
    while (!free_space) {
        random_device rd;
        mt19937 gen(rd());
        uniform_int_distribution<> distribution(0, boardsize-1);
        random_number_1 = distribution(gen);
        random_number_2 = distribution(gen);
        
        //check if free space
        if (food_map[random_number_1][random_number_2] == 0 && player_map[random_number_1][random_number_2] == 0) {
            free_space = true;
            food_map[random_number_1][random_number_2] = -1;
        }
    }
    i_food = random_number_1;
    j_food = random_number_2;
}

void draw_board() {
    for (int i = 0; i < boardsize; i++) {
        for (int j = 0; j < boardsize; j++) {
            if (player_map[i][j] != 0) {
                cout << "0 ";
            } else {
                if (i == i_food && j == j_food) {
                    cout << "X ";
                } else {
                    cout << "- ";
                }
            }
        }
        cout << "\n";
    }
}

void create_deadend_map() {
    // enter all player positions
    for (int i = 0; i < boardsize+2; i++) {
        for (int j = 0; j < boardsize+2; j++) {
            if (i != 0 && j != 0) {
                if (player_map[i-1][j-1] != 0) {
                    deadend_map[i][j] = 1;
                } else {
                    deadend_map[i][j] = 0;
                }
            }
            // draw border
            if (i == 0 || i == boardsize+1) {
                deadend_map[i][j] = 3;
            }
            if (j == 0 || j == boardsize+1) {
                deadend_map[i][j] = 3;
            }
        }
    }
    
    // iteratively mark fields that border 3 other marked fiels
    bool new_spot_found = true;
    int counter = 0;
    while (new_spot_found) {
        new_spot_found = false;
        for (int i = 1; i < boardsize+1; i++) {
            for (int j = 1; j < boardsize+1; j++) {
                counter = 0;
                if (deadend_map[i][j] == 0) {
                    if (deadend_map[i+1][j] != 0) {
                        if (!(i+1 == i_player+1 && j == j_player+1))
                            counter ++;
                    }
                    if (deadend_map[i-1][j] != 0) {
                        if (!(i-1 == i_player+1 && j == j_player+1))
                            counter ++;
                    }
                    if (deadend_map[i][j+1] != 0) {
                        if (!(i == i_player+1 && j+1 == j_player+1))
                            counter ++;
                    }
                    if (deadend_map[i][j-1] != 0) {
                        if (!(i == i_player+1 && j-1 == j_player+1))
                            counter ++;
                    }
                }
                // if three surrounding:
                if (counter >= 3) {
                    deadend_map[i][j] = 2;
                    new_spot_found = true;
                }
            }
        }
    }
}

void draw_deadend_map() {
    cout << "dead end map matrix:" << endl;
    for (int i = 0; i < boardsize+2; i++) {
        for (int j = 0; j < boardsize+2; j++) {
            if (deadend_map[i][j] == 1) {
                cout << "0 ";
            } else if (deadend_map[i][j] == 2) {
                cout << "O ";
            } else if (deadend_map[i][j] == 3) {
                cout << "B ";
            } else {
                cout << "- ";
            }
        }
        cout << "\n";
    }
}

//================================================================


void check_scored() {
    if (i_player == i_food && j_player == j_food) {
        scored = true;
        score ++;
    }
}

void check_alive_boundaries() {
    if (i_player > boardsize-1 || j_player > boardsize-1 || i_player < 0 || j_player < 0)
        alive = false;
}

void check_alive_snake() {
    if (player_map[i_player][j_player] != 0)
        alive = false;
}

void check_won() {
    if (score == (boardsize*boardsize)) {
        won = true;
        alive = false;
    }
}

void checks() {
    check_alive_boundaries();
    check_alive_snake();
    check_scored();
    check_won();
}

// DEAD END EXPERIMENTAL
bool check_deadend() {
    // check if dead end expected
    if (deadend_map[i_player_sug+1][j_player_sug+1] != 0) {
        return false;
    } else {
        return true;
    }
}

bool check_move_ok() {
    // check if crash with player
    if (player_map[i_player_sug][j_player_sug] != 0) {
        return false;
    // check if crash with walls
    } else if (i_player_sug < 0) {
        return false;
    } else if (j_player_sug < 0) {
        return false;
    } else if (i_player_sug > boardsize-1) {
        return false;
    } else if (j_player_sug > boardsize-1) {
        return false;
    } else {
        return true;
    }
}

bool check_move() {
    if (check_move_ok()) {
        if (consider_deadend) {
            if (check_deadend()) {
                return true; // move ok, no deadend
            } else {
                return false; // move not ok
            }
        } else {
            return true; // move ok
        }
    } else {
        return false; // move not ok
    }
}

void getmove6() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    j_player_sug --;
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        if (consider_deadend) {
            consider_deadend = false;
            i_player_sug = i_player;
            j_player_sug = j_player;
        } else {
            alive = false;
        }
    }
}

void getmove5() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    i_player_sug --;
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove6();
    }
}

void getmove4() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    j_player_sug ++;
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove5();
    }
}

void getmove3() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    i_player_sug ++;
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove4();
    }
}

void getmove2() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    if (j_player < j_food) {
        j_player_sug ++;
    } else if (j_player > j_food) {
        j_player_sug --;
    } else if (i_player < i_food) {
        i_player_sug ++;
    } else if (i_player > i_food) {
        i_player_sug --;
    }
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove3();
    }
}

void getmove1() {
    i_player_sug = i_player;
    j_player_sug = j_player;
    
    if (i_player < i_food) {
        i_player_sug ++;
    } else if (i_player > i_food) {
        i_player_sug --;
    } else if (j_player < j_food) {
        j_player_sug ++;
    } else if (j_player > j_food) {
        j_player_sug --;
    }
    
    if (check_move()) {
        i_player = i_player_sug;
        j_player = j_player_sug;
    } else {
        getmove2();
    }
}

void getmove() {
    consider_deadend = true;
    getmove1();
    if (i_player == i_player_sug && j_player == j_player_sug) {
        consider_deadend = false;
        getmove1();
    }
}


//================================================================


void output() {
    cout << "---------------------------"<< endl;
    cout << "game_state: " << gamestate << endl;
    cout << "SCORE: " << score << " <==" << endl;
    cout << "MOVES: " << moves_done << endl;
    cout << "moves considered tot: " << moves_considered << endl;
    cout << "moves considered now: " << current_moves_considered << endl;
    cout << "recalculations total: " << recalculations << endl;
    cout << "moves since scored tot: " << moves_since_food << endl;
    cout << "moves since scored max: " << max_moves_since_food << endl;
    cout << "dead_end iterations: " << deadend_iterations << endl;
    
    // draw boards
    draw_board();
    draw_deadend_map();
}

void game() {
    while (forever) {
        alive = true;
        create_player();
        create_board();
        scored = true;
        i_player = (boardsize-1)/2;
        j_player = (boardsize-1)/2;
        score = 1;
        moves_done = 0;
        recalculations = 0;
        moves_considered = 0;
        current_moves_considered = 0;
        max_moves_since_food = 0;
        moves_since_food = 0;

        //game loop:
        while (alive) {
            checks();
            if (scored) {
                spawn_new_food(); //spawn new food
                scored = false;
                moves_since_food = 0;
            } else {
                update_player();
            }
            player_map[i_player][j_player] = score; //draw new player position

            if (moves_since_food > max_moves_since_food) {
                max_moves_since_food = moves_since_food;
            }
            if (!alive) {
                cout << "---------------------------"<< endl;
                cout << "GAME OVER!" << endl;
                break;
            }

            current_moves_considered = 0;
            
            deadend_iterations = 0;
            create_deadend_map();
            
            //--------
            getmove();
            output();
            //--------
            
            check_won();
            if (won) {
                cout << "---------------------------"<< endl;

                cout << "WINNER, WINNER, CHICKEN DINNER" << endl;
                alive = false;
                break;
            }
            moves_done ++; //statistics
            moves_since_food ++;
            sleep();
        }
        
        cout << "---------------------------"<< endl;
        if (score > highscore) {
            highscore = score;
            cout << "NEW HIGHSCORE: " << highscore << endl;
        } else {
            cout << "SCORE: " << score << endl;
            cout << "highscore: " << highscore << endl;
        }
        cout << "movements: " << moves_done << endl;
        cout << "moves considered: " << moves_considered << endl;
        cout << "recalculations total: " << recalculations << endl;
        cout << "moves since scored max: " << max_moves_since_food << endl;
        cout << "---------------------------"<< endl;
        cout << "STATISTICS" << endl;
        cout << "moves per score: " << static_cast<double>(moves_done/score) << endl;
        cout << "calculations p move: " << static_cast<double>(moves_considered/moves_done) << endl;
        sleep2();
    }
}


int main() {
    game();

}
